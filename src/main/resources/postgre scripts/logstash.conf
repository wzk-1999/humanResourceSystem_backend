input {
  file {
   path => ["C:/project/BlueOceanSystem/humanResourceSystem_backend/logs/*.log"]
    start_position => "beginning"
    sincedb_path => "NUL"  # Use NUL for Windows equivalent of /dev/null
    # sincedb_path => "C:\Program Files\logstash-8.7.0\data\.sincedb"  # Use NUL for Windows equivalent of /dev/null
    exclude => ["*.gz"]                              
  }
}

filter {
  grok {
    match => { 
      "message" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second} %{LOGLEVEL:loglevel} %{DATA:logsource}: %{GREEDYDATA:logmessage}"
    }
  }

  # Combine the extracted fields into a single timestamp string
  mutate {
    add_field => { 
      "log_timestamp" => "%{year}-%{month}-%{day} %{hour}:%{minute}:%{second}"
    }
  }

  # Convert log timestamp to Logstash's @timestamp
  date {
    match => ["log_timestamp", "yyyy-MM-dd HH:mm:ss"]
    target => "@timestamp"
	timezone => "America/New_York"  # Set timezone to EDT
  }
  
   # Ruby filter to calculate week_start and week_end
  ruby {
    code => "
     require 'time'
    
    # Get the log timestamp
    log_time = event.get('@timestamp').time
    
    # Calculate the start of the week (Monday)
    monday = log_time - ((log_time.wday == 0 ? 7 : log_time.wday) - 1) * 86400
    
    # Calculate the end of the week (Sunday)
    sunday = monday + 6 * 86400
    
    # Set the week_start and week_end in yyyyMMdd format
    event.set('week_start', monday.strftime('%Y%m%d'))
    event.set('week_end', sunday.strftime('%Y%m%d'))
    "
  }
  
   # Set log_source field based on path
  mutate {
    add_field => { 
      "log_source" => "%{[log][file][path]}"
    }
  }
  
   mutate {  
    gsub => ["log_source", "C:/project/BlueOceanSystem/humanResourceSystem_backend/logs/(.*).log", "\1"]  
  }  
  
  # Retain the original message (unchanged)
  # mutate {
    # add_field => {
      # "event.original" => "%{message}"
    # }
  # }

  # Remove unnecessary fields before sending to Elasticsearch
  mutate {
    remove_field => ["message","@version", "@timestamp","log_timestamp", "year", "month", "day", "hour", "minute", "second","logmessage","loglevel","logsource"]
  }
}

output {
  # Output to a file for testing
  # file {
    # path => "C:/project/BlueOceanSystem/humanResourceSystem_backend/output/test_output.log"
    # codec => json_lines  # Write the output as JSON lines for easier inspection
  # }
  # Conditional routing based on log filename
  
  # failed in comparation condition, I don't know why 
   # if [path] =~ "C:/project/BlueOceanSystem/humanResourceSystem_backend/logs/app.log" {
    # elasticsearch {
      # hosts => ["http://localhost:9200"]
      # index => "bo_hr_info_%{week_start}_%{week_end}"
      # ecs_compatibility => disabled
    # }
  # } else if [path] =~ "C:/project/BlueOceanSystem/humanResourceSystem_backend/logs/error.log" 
  # { elasticsearch {
      # hosts => ["http://localhost:9200"]
      # index => "bo_hr_error_%{week_start}_%{week_end}"
      # ecs_compatibility => disabled
    # }
# }

  # Send data to Elasticsearch
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "bo_hr_%{log_source}_%{week_start}_%{week_end}"
    ecs_compatibility => disabled
  }

 # elasticsearch {
      # hosts => ["http://localhost:9200"]
      # index => "bo_hr_info_%{week_start}_%{week_end}"
      # index => "bo_hr_info_20240909_20240915"  // naming can't include uppercase letter
      # ecs_compatibility => disabled
    # }

  # Optional: Output to console for debugging
  stdout { codec => rubydebug }
}

